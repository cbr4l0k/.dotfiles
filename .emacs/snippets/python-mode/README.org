#+TITLE:     Python3 snippets
#+AUTHOR:    Yeiipi
#+PROPERTY: header-args:yasnippet :mkdirp yes :padline no
#+PROPERTY: header-args:elisp :mkdirp yes :padline no

* Table of Contents :toc:
- [[#setup][Setup]]
- [[#misc][Misc]]
- [[#classes][Classes]]
  - [[#dunder-methods][Dunder methods]]
- [[#functions][Functions]]
- [[#basic][Basic]]

* Setup

#+BEGIN_SRC elisp :tangle ./.yas-parents
prog-mode
#+END_SRC

#+BEGIN_SRC elisp :tangle ./yas-setup.el
(require 'yasnippet)
(defvar yas-text)

(defun python-split-args (arg-string)
  "Split a python argument string into ((name, default)..) tuples"
  (mapcar (lambda (x)
             (split-string x "[[:blank:]]*=[[:blank:]]*" t))
          (split-string arg-string "[[:blank:]]*,[[:blank:]]*" t)))

(defun python-args-to-docstring ()
  "return docstring format for the python arguments in yas-text"
  (let* ((indent (concat "\n" (make-string (current-column) 32)))
         (args (python-split-args yas-text))
         (max-len (if args (apply 'max (mapcar (lambda (x) (length (nth 0 x))) args)) 0))
         (formatted-args (mapconcat
                (lambda (x)
                   (concat (nth 0 x) (make-string (- max-len (length (nth 0 x))) ? ) " -- "
                           (if (nth 1 x) (concat "\(default " (nth 1 x) "\)"))))
                args
                indent)))
    (unless (string= formatted-args "")
      (mapconcat 'identity (list "Keyword Arguments:" formatted-args) indent))))

(defun python-args-to-docstring-numpy ()
  "return docstring format for the python arguments in yas-text"
  (let* ((args (python-split-args yas-text))
         (format-arg (lambda(arg)
                       (concat (nth 0 arg) " : " (if (nth 1 arg) ", optional") "\n")))
         (formatted-params (mapconcat format-arg args "\n"))
         (formatted-ret (mapconcat format-arg (list (list "out")) "\n")))
    (unless (string= formatted-params "")
      (mapconcat 'identity
                 (list "\nParameters\n----------" formatted-params
                       "\nReturns\n-------" formatted-ret)
                 "\n"))))


(add-hook 'python-mode-hook #'yasnippet-snippets--fixed-indent)
#+END_SRC

* Misc

#+BEGIN_SRC yasnippet :tangle ./ifmain
# -*- mode: snippet -*-
# name: ifmain
# key: ifm
# contributor:yeiipi
# group : misc
# --
if __name__ == '__main__':
    ${1:main()}
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./main
# -*- mode: snippet -*-
# name: main
# key: main
# contributor:yeiipi
# group : misc
# --
def main():
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./np
# -*- mode: snippet -*-
# name: np
# key: np
# contributor:yeiipi
# group : misc
# --
import numpy as np
$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./import-pyplot
# -*- mode: snippet -*-
# name: import_pyplot
# key: plt
# contributor:yeiipi
# group : misc
# --
import matplotlib.pyplot as plt
$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./list-for
# -*- mode: snippet -*-
# name: list_for
# key: li
# contributor:yeiipi
# group : misc
# --
[${1:el} for $1 in ${2:list}]
$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./print
# -*- mode: snippet -*-
# name: print
# key: p
# contributor:yeiipi
# group : misc
# --
print( $0 )
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./fprint
# -*- mode: snippet -*-
# name: fprint
# key: fp
# contributor:yeiipi
# group : misc
# --
print( f"$0" )
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./return
# -*- mode: snippet -*-
# name: return
# key: r
# contributor:yeiipi
# group : misc
# --
return $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./import
# -*- mode: snippet -*-
# name: import
# key: imp
# contributor:yeiipi
# group : misc
# --
import ${1:lib}${2: as ${3:alias}}
$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./from
# -*- mode: snippet -*-
# name: from
# key: from
# contributor:yeiipi
# group : misc
# --
from ${1:lib} import ${2:funs}
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./docstring
# -*- mode: snippet -*-
# name: docstring
# key: d
# contributor:yeiipi
# group : misc
# --
"""$0
"""
#+END_SRC


* Classes

#+BEGIN_SRC yasnippet :tangle ./self
# -*- mode: snippet -*-
# name: self
# key: .
# contributor:yeiipi
# group : classes
# --
self.$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./self-assign
# -*- mode: snippet -*-
# name: self_assign
# key: sn
# contributor:yeiipi
# group : classes
# --
self.$1 = $1
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./method
# -*- mode: snippet -*-
# name: method
# key: m
# contributor:yeiipi
# group : classes
# --
def ${1:method}(self${2:, $3}):
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./method-docstring
# -*- mode: snippet -*-
# name: method_docstring
# key: md
# contributor:yeiipi
# group : classes
# --
def ${1:name}(self$2):
    \"\"\"$3
    ${2:$(python-args-to-docstring)}
    \"\"\"
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./method-docstring-numpy
# -*- mode: snippet -*-
# name: method_docstring_numpy
# key: mdn
# contributor:yeiipi
# group : classes
# --
def ${1:name}(self$2):
    \"\"\"$3
    ${2:$(python-args-to-docstring-numpy)}
    \"\"\"
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./class
# -*- mode: snippet -*-
# name: class
# key: cls
# contributor:yeiipi
# group : classes
# --
class ${1:Class}:
    $0
#+END_SRC


** Dunder methods

#+BEGIN_SRC yasnippet :tangle ./str
# -*- mode: snippet -*-
# name: __str__
# key: str
# contributor:yeiipi
# group : classes-dunder-methods
# --
def __str__(self):
    $0
#+END_SRC


#+BEGIN_SRC yasnippet :tangle ./repr
# -*- mode: snippet -*-
# name: __repr__
# key: repr
# contributor:yeiipi
# group : classes-dunder-methods
# --
def __repr__(self):
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./init
# -*- mode: snippet -*-
# name: __init__
# key: init
# contributor:yeiipi
# group : classes-dunder-methods
# --
def __init__(self${1:, args}):
    ${2:"${3:docstring}"
    }$0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./init-docstring
# -*- mode: snippet -*-
# name: init_docstring
# key: id
# contributor:yeiipi
# group : classes-dunder-methods
# --
def __init__(self$1):
    \"\"\"$2
    ${1:$(python-args-to-docstring)}
    \"\"\"
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./init-docstring-numpy
# -*- mode: snippet -*-
# name: init_docstring_numpy
# key: idn
# contributor:yeiipi
# group : classes-dunder-methods
# --
def __init__(self$1):
    \"\"\"$2
    ${1:$(python-args-to-docstring-numpy)}
    \"\"\"
    $0
#+END_SRC

* Functions

#+BEGIN_SRC yasnippet :tangle ./function
# -*- mode: snippet -*-
# name: function
# key: f
# contributor:yeiipi
# group : functions
# --
def ${1:fun}(${2:args}):
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./function-docstring
# -*- mode: snippet -*-
# name: function_docstring
# key: fd
# contributor:yeiipi
# group : functions
# --
def ${1:name}($2):
 \"\"\"$3
 ${2:$(python-args-to-docstring)}
 \"\"\"
 $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./function-docstring-numpy
# -*- mode: snippet -*-
# name: function_docstring_numpy
# key: fdn
# contributor:yeiipi
# group : functions
# --
def ${1:name}($2):
 \"\"\"$3
 ${2:$(python-args-to-docstring-numpy)}
 \"\"\"
 $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./lambda
# -*- mode: snippet -*-
# name: lambda
# key: lam
# contributor:yeiipi
# group : functions
# --
lambda ${1:x}: $0
#+END_SRC

* Basic

#+BEGIN_SRC yasnippet :tangle ./for
# -*- mode: snippet -*-
# name: for
# key: for
# contributor:yeiipi
# group : basic
# --
for ${1:var} in ${2:collection}:
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./if
# -*- mode: snippet -*-
# name: if
# key: if
# contributor:yeiipi
# group : basic
# --
if ${1:cond}:
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./ife
# -*- mode: snippet -*-
# name: ife
# key: ife
# contributor:yeiipi
# group : basic
# --
if $1:
    $2
else:
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./try
# -*- mode: snippet -*-
# name: try
# key: try
# contributor:yeiipi
# group : basic
# --
try:
    $0
except ${1:Exception}:
    $2
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./try-else
# -*- mode: snippet -*-
# name: try_else
# key: trye
# contributor:yeiipi
# group : basic
# --
try:
    $0
except $1:
    $2
else:
    $3
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./with
# -*- mode: snippet -*-
# name: with
# key: with
# contributor:yeiipi
# group : basic
# --
with ${1:expr}${2: as ${3:alias}}:
    $0
#+END_SRC

#+BEGIN_SRC yasnippet :tangle ./while
# -*- mode: snippet -*-
# name: while
# key: wh
# contributor:yeiipi
# group : basic
# --
while ${1:True}:
    $0
#+END_SRC
